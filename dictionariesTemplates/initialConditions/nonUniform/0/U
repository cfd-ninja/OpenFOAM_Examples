/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2306                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField; // Векторное поле 'U'
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Выбор размерности для поля 'U'
//               кг м с К моль А кд
dimensions      [0 1 -1 0  0   0 0]; // Размерность поля 'U' это [метры]/[секунды]

// Почти весь код ниже можно считать "шаблоном"
// Для разных формул изменяется в только содержимое цикла 'forAll'

// С помощью codeStream значения в начальный момент времени
// Будут вычислены во время запуска расчетов
internalField   #codeStream
{
    codeInclude // Подключение основного заголовочного файла
    #{ #include "fvCFD.H" #};

    codeOptions // Добавление новых путей для поиска подключаемых файлов при компиляции
    #{
			-I$(LIB_SRC)/finiteVolume/lnInclude \
			-I$(LIB_SRC)/meshTools/lnInclude
    #};

    codeLibs // Подключение библиотек
    #{
			-lmeshTools \
			-lfiniteVolume
    #};

		// Секция с кодом C++
    code
    #{
			// Получение данных о сетке (объект 'mesh')
			const IOdictionary& d = static_cast<const IOdictionary&>(dict);
      const fvMesh& mesh = refCast<const fvMesh>(d.db());

			// Создание списка векторных значений ('U')
			// Эти значения будут записаны в центры ячеек, как начальное условие
			vectorField U(mesh.nCells()); // n.Cells() возвращает кол-во ячеек

			// 'CC' это список векторных значений -- центры ячеек
			const vectorField& CC = mesh.C();

			forAll(CC, i) // Цикл по всем центрам ячеек
			{
				scalar x = CC[i].x(); // 'X' - координата очередной ячейки
				scalar y = CC[i].y(); // 'Y' - координата очередной ячейки
				scalar z = CC[i].z(); // 'Z' - координата очередной ячейки

				// Формула, определяющая начальные условия на компоненты поля 'U'
				U[i] = vector(x, y, z);

        // Можно отдельно для каждой комоненты записать формулу
				//U[i].x() = x;
        //U[i].y() = y;
        //U[i].z() = z;
			}

			U.writeEntry("", os); // Оператор записи значений (в оперативную память)
    #};
};


// Граничные условя (первого рода, равномерные и нулевые)
boundaryField
{
    boundaryRegion // Имя граничной области (см. файл blockMeshDict)
    {
        type	fixedValue;
        value	uniform (0 0 0);
    }
}

// ************************************************************************* //
