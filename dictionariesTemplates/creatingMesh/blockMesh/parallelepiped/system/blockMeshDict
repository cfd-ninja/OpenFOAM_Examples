/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2306                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   1.0; // Масштабный множитель, на который умножаются значения вершин

// Длины сторон параллелипипеда
Lx 1.0;
Ly 2.0;
Lz 3.0;
// $Lx и т.д. это макро-подстановка, т.е. вместо $Lx подставляется значение


// Набор вершин
vertices
(
    (0    0   0) // Индекс вершины: 0
    ($Lx  0   0) // 1
    ($Lx $Ly  0) // 2
    (0   $Ly  0) // 3
    (0    0  $Lz) // 4
    ($Lx  0  $Lz) // 5
    ($Lx $Ly $Lz) // 6
    (0   $Ly $Lz) // 7
);

// По перечисленным в 'vertices' вершинам можно сформировать блоки
// Каждый блок будет разделен на ячейки
blocks
(
    // (10 10 10) - число разбиений по осям Ox, Oy, Oz соответственно

    // simpleGrading - используется, чтобы задавать отношение:
    // [длины ребра последней ячейки к длине ребра первой ячейки]
    // вдоль соответствующей оси (Ox, Oy, Oz)
    // Например, здесь ребёра вдоль оси (Ox) от начала к концу
    // изменятся в 5 раз
    hex (0 1 2 3 4 5 6 7) (10 10 10) simpleGrading (5 1 1)
);

// Выбор способа соединения вершин
// Не заполнен, поэтому вершины соединяются отрезками
// Это способ по умолчанию
edges
(
);

// "Разметка" граничной области (именование граней параллелипипеда)
boundary
(
    leftWall // Грань x = 0
    {
        type patch; // Тип граничной области
        faces ( (0 3 7 4) ); // Список граней, составляющих этот участок границы
        // Каждая грань определяется набором из 4-х вершин
        // При описании грани порядок перечисления вершин такой
        // Как при обходе этих вершин против часовой стрелки
        // Если смотреть с конца вектота внешней нормали к этой грани
    }

    rightWall // Грань x = Lx
    {
        type patch;
        faces ( (2 1 5 6) ); // В списке 'faces' может быть большей одной грани
    }

    bottomWall // Грань z = 0
    {
        type patch;
        faces ( (0 1 2 3) );
    }

    topWall // Грань z = Lz
    {
        type patch;
        faces ( (4 7 6 5) );
    }

    backWall // Грань y = 0
    {
        type patch;
        faces ( (1 0 4 5) );
    }

    frontWall // Грань y = Ly
    {
        type patch;
        faces ( (3 2 6 7) );
    }

);

// ************************************************************************* //
