/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2306                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   1.0; // Масштабный множитель, на который умножаются значения вершин

H 6.283184; // Высота цилиндра
r 0.5; // Радиус <<выреза>>
R 1.0; // Радиус внешнего цилиндра

// Число разбиений вдоль соотв. осей координат
Nx 20;
Ny 20;
Nz 20;

// $r и т.д. это макро-подстановка, т.е. вместо $r подставляется значение
arc_r #calc "cos(3.141593/4.0) * $r"; // cos(pi/4)*r
arc_R #calc "cos(3.141593/4.0) * $R";

// Перечисление вершин
vertices
(
    // Нижнее основание внутреннего цилиндра
    (-$r 0 0) //индекс вершины: 0
    ($r  0 0) //1
    (0  $r 0) //2
    (0 -$r 0) //3

    // Нижнее основание ввнешнего цилиндра
    (-$R 0 0) //4
    ($R  0 0) //5
    (0  $R 0) //6
    (0 -$R 0) //7

   // Верхнее основание внутреннего цилиндра
    (-$r 0 $H) //8
    ($r  0 $H) //9
    (0  $r $H) //10
    (0 -$r $H) //11

   // Верхнее основание внешнего цилиндра
    (-$R 0 $H) //12
    ($R  0 $H) //13
    (0  $R $H) //14
    (0 -$R $H) //15
);

blocks
(
    //у каждого блока своя правая ортонормированная система координат
    hex (1 5 6 2 9 13 14 10) ($Nx $Ny $Nz) simpleGrading (1 1 1) // блок: 1
    hex (0 2 6 4 8 10 14 12) ($Nx $Ny $Nz) simpleGrading (1 1 1) // блок: 2
    hex (7 3 0 4 15 11 8 12) ($Nx $Ny $Nz) simpleGrading (1 1 1) // блок: 3
    hex (7 5 1 3 15 13 9 11) ($Nx $Ny $Nz) simpleGrading (1 1 1) // блок: 4
);

edges
(
    // При описании точек на дугах окружности
    // Порядок перечисления точек, как при обходе против часовой стрелки

    // Пример:
    // arc 1 2 (0.1 0.2 0.3)
    // Эта строка означет, что точки с индексами '1' и '2'
    // Нужно соединить не отрезком (по умолчанию), а другой окружности
    // Дуга должна соединять точки '1' и '2' и проходить через точку
    // С координатами (0.1 0.2 0.3)

    /* Дуги нижнего внутреннего цилиндра
    arc 1 2 ( 0.0707  0.0707 0)
    arc 2 0 (-0.0707  0.0707 0)
    arc 0 3 (-0.0707 -0.0707 0)
    arc 3 1 ( 0.0707 -0.0707 0) */

    // Дуги нижнего внутреннего цилиндра
    arc 1 2 ( $arc_r  $arc_r 0)
    arc 2 0 (-$arc_r  $arc_r 0)
    arc 0 3 (-$arc_r -$arc_r 0)
    arc 3 1 ( $arc_r -$arc_r 0)


    // Дуги нижнего внешнего цилинда
    arc 5 6 ( $arc_R  $arc_R 0)
    arc 6 4 (-$arc_R  $arc_R 0)
    arc 4 7 (-$arc_R -$arc_R 0)
    arc 7 5 ( $arc_R -$arc_R 0)

    // Дуги вернего внутреннего цилиндра
    arc 9 10 ( $arc_r  $arc_r $H)
    arc 10 8 (-$arc_r  $arc_r $H)
    arc 8 11 (-$arc_r -$arc_r $H)
    arc 11 9 ( $arc_r -$arc_r $H)

    // Дуги верхнего внешнего цилиндра
    arc 13 14 ( $arc_R   $arc_R $H)
    arc 14 12 (-$arc_R  $arc_R $H)
    arc 12 15 (-$arc_R -$arc_R $H)
    arc 15 13 ( $arc_R -$arc_R $H)

);


boundary
(
    // Внутренняя боковая поверхность
    insideWall
    {
        //type    wall; // Тип участка гарницы
        type    patch; // Тип участка гарницы
        faces // Список граней, входящих в данный участок
        (
            (2 1 9 10)
            (0 2 10 8)
            (3 0 8 11)
            (1 3 11 9)
        );
    }

    // Внешняя боковая поверхность
    outsideWall
    {
        //type     wall;
        type    patch;
        faces
        (
            (5 6 14 13)
            (6 4 12 14)
            (4 7 15 12)
            (7 5 13 15)
        );
    }

    // Нижнее основание
    bottomWall
    {
        //type  wall;
        type    patch;
        faces
        (
            (5 1 2 6)
            (0 4 6 2)
            (7 4 0 3)
            (5 7 3 1)
        );
    }

    // Верхнее основание
    topWall
    {
        //type  wall;
        type    patch;
        faces
        (
            (9 13 14 10)
            (8 10 14 12)
            (12 15 11 8)
            (15 13 9 11)
        );
    }

);


// ************************************************************************* //
